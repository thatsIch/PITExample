buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.google.guava:guava:18.0"
    }
}

plugins {
    id "java"

    // generates coverage data
    // see homepage: http://eclemma.org/jacoco/
    // see plugin: https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id "jacoco"

    // running mutating coverage tests
    // see homepage: http://pitest.org/
    // see plugin: http://gradle-pitest-plugin.solidsoft.info/
    id "info.solidsoft.pitest" version "1.1.4"

    // used to publish the coverage data to coveralls
    // see homepage: https://coveralls.io/
    // see plugin: https://github.com/kt3k/coveralls-gradle-plugin/
    id "com.github.kt3k.coveralls" version "2.4.0"

    // upload to bintray / jcenter
    // see homepage: https://bintray.com
    // see plugin: https://github.com/bintray/gradle-bintray-plugin
    id "com.jfrog.bintray" version "1.3.1"

    // can create github release notes
    // see homepage:  https://github.com
    // see plugin: https://github.com/riiid/gradle-github-plugin
    id "co.riiid.gradle" version "0.3.1"

    // evaluates jacoco coverage
    // see plugin: https://github.com/palantir/gradle-jacoco-coverage
    id "com.palantir.jacoco-coverage" version "0.3.0"
}

// import ext.projectversion
apply from: 'gradle/scripts/versioning.gradle'

group "de.thatsich"
description 'Example project to test PIT with several other plugins'
sourceCompatibility = 1.8
targetCompatibility = 1.8
version ext.projectversion

repositories {
    mavenCentral()
}

javadoc {
    source = sourceSets.main.java
    classpath = configurations.compile
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'build/docs/javadoc/'
    classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar

    archives javadocJar
    archives sourcesJar
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

jacocoCoverage {
    // Enforce minimum code coverage of 50% for every Java file.
    // Value differs from branch. Release will have a much higher threshold than develop
    switch( currentBranch) {
        case "develop":
            fileThreshold 0.5
            break;

        case "release":
            fileThreshold 0.75
            break;

        case "production":
            fileThreshold 1
            break;

        default:
            break;
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

pitest {
    pitestVersion = '1.1.7'
    reportDir = "build/reports/pitest"
    targetClasses = ['de.thatsich.*']
    threads = 32
    outputFormats = ['HTML']
    mutators = ['ALL']
}

bintray {
    user = System.getenv('BINTRAY_USER') ?: "user"
    key = System.getenv('BINTRAY_KEY') ?: "key"
    dryRun = true
    pkg {
        repo = 'maven'
        name = 'PITExample'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/thatsIch/PITExample.git'
        version {
            name = "v${project.version}"
            desc = 'Project with various plugins'
            released = new Date()
            vcsTag = "${project.version}"
            attributes = ['testattribute': 'some attribute']
        }
    }
    configurations = ['archives']
}

github {
    owner = 'thatsich'
    repo = "${project.name}"
    token = System.getenv('GITHUB_PLUGIN_KEY') ?: "GITHUB_PLUGIN_KEY"
    tagName = "${project.version}"
    targetCommitish = currentBranch
    name = "v${project.version}"
    body = this.changeLog
    prerelease = this.isPreRelease()
    assets = [
            "build/libs/${project.name}-${project.version}",
            "build/libs/${project.name}-${project.version}-javadoc",
            "build/libs/${project.name}-${project.version}-sources",
            'build/reports/pitest',
            'build/reports/tests',
            'CHANGELOG.md'
    ]
}

def String getChangeLog() {
    return new File('CHANGELOG.md').getText('UTF-8')
}

task printChangeLog(group: 'Debug', description: 'Returns the changelog.') << {
    println this.changeLog
}

def String getCurrentBranch() {
    def currentBranchCommand = "git rev-parse --abbrev-ref HEAD"
    def currentBranch = currentBranchCommand.execute()
    def currentBranchAsText = currentBranch.text.trim()

    return currentBranchAsText
}

task printCurrentBranch(group: 'Debug', description: 'Returns the current branch.') << {
    println this.currentBranch
}

def isPreRelease() {
    return this.currentBranch == 'release'
}

task printIsPreRelease(group: 'Debug', description: 'Returns if the current version is a pre-release.') << {
    println this.isPreRelease
}