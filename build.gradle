buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'co.riiid:gradle-github-plugin:0.3.1'
    }
}

plugins {
    id "java"

    // generates coverage data
    // see homepage: http://eclemma.org/jacoco/
    // see plugin: https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id "jacoco"

    // running mutating coverage tests
    // see homepage: http://pitest.org/
    // see plugin: http://gradle-pitest-plugin.solidsoft.info/
    id "info.solidsoft.pitest" version "1.1.4"

    // used to publish the coverage data to coveralls
    // see homepage: https://coveralls.io/
    // see plugin: https://github.com/kt3k/coveralls-gradle-plugin/
    id "com.github.kt3k.coveralls" version "2.4.0"

    // tracks dependency status
    // see homepage: https://www.versioneye.com/
    // see plugin: https://github.com/stempler/gradle-versioneye-plugin
    id "org.standardout.versioneye" version "1.0.1"

    // upload to bintray / jcenter
    // see homepage: https://bintray.com
    // see plugin: https://github.com/bintray/gradle-bintray-plugin
    id "com.jfrog.bintray" version "1.3.1"

    // prints pretty changelogs from git
    // see homepage: https://git-scm.com/
    // see plugin: https://github.com/selesse/gradle-git-changelog
    id "com.selesse.git.changelog" version "0.1.2"
}

// can create github release notes
// see homepage:  https://github.com
// see plugin: https://github.com/riiid/gradle-github-plugin
apply plugin: 'co.riiid.gradle'

group "de.thatsich"
description 'Example project to test PIT with several other plugins'
sourceCompatibility = 1.8
version '0.0.2'

repositories {
    mavenCentral()
}

javadoc {
    source = sourceSets.main.java
    classpath = configurations.compile
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'build/docs/javadoc/'
    classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar

    archives javadocJar
    archives sourcesJar
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = false
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

pitest {
    pitestVersion = '1.1.7'
    targetClasses = ['de.thatsich.*']
    threads = 4
    outputFormats = ['HTML', 'XML']
    mutators = ['ALL']
}

bintray {
    user = System.getenv('BINTRAY_USER') ?: "user"
    key = System.getenv('BINTRAY_KEY') ?: "key"
    dryRun = true
    pkg {
        repo = 'maven'
        name = 'PITExample'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/thatsIch/PITExample.git'
        version {
            name = "v${project.version}"
            desc = 'Project with various plugins'
            released = new Date()
            vcsTag = "${project.version}"
            attributes = ['testattribute': 'some attribute']
        }
    }
    configurations = ['archives']
}

versioneye {
    // only declared dependencies are checked for updates
    dependencies = declared
}

changelog {
    // The title appears at the top of the changelog.
    // Default value: the name of the project.
    title = "${project.name} - Changelog"

    // The output directory where the report is generated.
    // Default value: main resource directory, or the "build" directory
    outputDirectory = file("$projectDir")

    // The name of the report to generate.
    // Default value: CHANGELOG.md
    fileName = "CHANGELOG.md"

    // The range of commits the changelog should be composed of.
    // Default value: 'beginning' (i.e. full changelog)
    // Possible values: 'beginning', 'last_tag', 'xxx'
    //
    // 'last_tag' will use all the commits since the last tag,
    // 'beginning' will use all commits since the initial commit (default)
    // 'xxx' will use all the tags since the 'xxx' Git reference (i.e. `since = 1.2.0` will display the changelog
    //       since the 1.2.0 tag, excluding 1.2.0)
    since = 'beginning'

    // The output formats that should be generated.
    // Default value: ['markdown']
    // Possible values: 'html', 'markdown'.
    formats = ['markdown', 'html']

    // The Git "pretty" changelog commit format.
    // Default value: %ad%x09%s (%an), which produces:
    // Thu May 7 20:10:33 2015 -0400    Initial commit (Alex Selesse)
    commitFormat = '%s (%an)'

    // A closure that returns 'true' if the line should be included in the changelog.
    // Default value: accept everything, { true }
    includeLines = {
        !it.contains("Merge")
    }

    // A closure that transforms a changelog String.
    // Default value: the identity closure, { it }
    //
    // For example, to remove '[ci skip]' from the changelog messages:
    processLines = {
        String input = it as String
        if (input.contains('[ci skip] ')) {
            input = input.minus('[ci skip] ')
        }
        input
    }
}

github {
    owner = 'thatsich'
    repo = "${project.name}"
    token = System.getenv('GITHUB_PLUGIN_KEY') ?: "GITHUB_PLUGIN_KEY"
    tagName = "${project.version}"
    targetCommitish = 'master'
    name = "v${project.version}"
//    body = new File('resources/main/CHANGELOG.md').getText('UTF-8')
    body = this.changeLog
    prerelease = this.isPreRelease()
    assets = [
            "build/libs/${project.name}-${project.version}",
            "build/libs/${project.name}-${project.version}-javadoc",
            "build/libs/${project.name}-${project.version}-sources",
            'build/reports/pitest',
            'build/reports/tests',
            'resources/main/CHANGELOG.md'
    ]
}
githubRelease.dependsOn generateChangelog

def String getChangeLog() {
    return new File('build/resources/main/CHANGELOG.md').getText('UTF-8')
}

task printChangeLog(group: 'Debug', description: 'Returns the changelog.') << {
    println this.changeLog
}

def String getCurrentBranch() {
    def currentBranchCommand = "git rev-parse --abbrev-ref HEAD"
    def currentBranch = currentBranchCommand.execute()
    def currentBranchAsText = currentBranch.text.trim()

    return currentBranchAsText
}

task printCurrentBranch(group: 'Debug', description: 'Returns the current branch.') << {
    println this.currentBranch
}

def isPreRelease() {
    return this.currentBranch == 'release'
}

task printIsPreRelease(group: 'Debug', description: 'Returns if the current version is a pre-release.') << {
    println this.isPreRelease
}