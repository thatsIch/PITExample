ext.projectversion = readVersion()

/**
 * Class for project version.
 * Contains major minor revision and commit count.
 * Offers 3 methods to increase major, minor and revision,
 * commit count will be determined dynamically
 * and can only be set upon construction
 */
class ProjectVersion {
    private Integer major
    private Integer minor
    private Integer patch
    private String label
    private String meta

    // Constructor
    ProjectVersion(Integer major, Integer minor, Integer patch, String label, String meta) {
        this.major = major
        this.minor = minor
        this.patch = patch
        this.label = label
        this.meta = meta
    }

    @Override
    String toString() {
        String result = "$major.$minor.$patch";

        if (this.label) {
            result += "-" + this.label
        }
        if ( this.meta) {
            result += "+" + this.meta
        }

        result
    }

    public ProjectVersion incMajor() {
        ++this.major
        this.minor = 0
        this.patch = 0

        return this
    }

    public ProjectVersion incMinor() {
        ++this.minor
        this.patch = 0

        return this
    }

    public ProjectVersion incPatch() {
        ++this.patch

        return this
    }
}
/**
 * Pulls the version information from git
 *
 * @return project version
 */
private ProjectVersion readVersion() {

    // call git command.
    final def outStream = new ByteArrayOutputStream()
    final def projectVersion

    try {
        exec {
            executable = 'git'
            args = ['describe', '--tags', "HEAD"]
            standardOutput = outStream
        }

        final def fullVersion = outStream.toString().trim()
        final def matcher = fullVersion =~ /^(\d+)\.(\d+)\.(\d+)(-([\dA-Za-z-]+))?(\+([\dA-Za-z-]+))?/
        final def match = matcher[0]

        final def Integer major = match[1].toInteger()
        final def Integer minor = match[2].toInteger()
        final def Integer patch = match[3].toInteger()
        final def String label = match[5].toString()
        final def String meta = match[7].toString()
        final def Integer commit = gitCommitCount

        projectVersion = new ProjectVersion(major, minor, patch, label, meta)
    }
    catch (e) {
        logger.warn("Tag was not correctly parsed. Injecting and returning default version.", e)
        projectVersion = new ProjectVersion(0, 0, 0, null, null)

        tag("/dev/null", projectVersion.toString())
    }

    return projectVersion
}

/**
 * gets the count of commits on the repository
 *
 * @return count of commits
 */
private Integer getGitCommitCount() {

    // call git command.
    def outStream = new ByteArrayOutputStream()
    try {
        exec {
            executable = 'git'
            args = ['rev-list', 'HEAD', "--count"]
            standardOutput = outStream
        }

        def fullVersion = outStream.toString().trim()
        def matcher = fullVersion =~ /(\d+)/

        return matcher[0][1].toInteger()
    }
    catch (exception) {
        logger.warn "Can't get commit count: $exception"
        return 0
    }
}

/**
 * Creates a new tag with old and new tag message
 *
 * @param oldTag old tag
 * @param newTag new tag
 */
private void tag(String oldTag, String newTag) {
    String message = "Incrementing project version: $oldTag -> $newTag"
    logger.quiet message

    exec {
        executable = 'git'
        args = ['tag', '-a', newTag, "-m", message]
    }
}

/**
 * Pushes all outstanding commits
 */
private void push() {
    // call git command.
    exec {
        executable = 'git'
        args = ['push', '--follow-tags']
    }
}

task incMajor(group: 'versioning', description: 'Increments project major project.ext.version.') << {
    String oldTag = projectversion.toString()
    String newTag = projectversion.incMajor().toString()

    tag(oldTag, newTag)
}

task incMinor(group: 'versioning', description: 'Increments project minor project.ext.version.') << {
    String oldTag = projectversion.toString()
    String newTag = projectversion.incMinor().toString()

    tag(oldTag, newTag)
}

task incPatch(group: 'versioning', description: 'Increments project patch project.ext.version.') << {
    String oldTag = projectversion.toString()
    String newTag = projectversion.incPatch().toString()

    tag(oldTag, newTag)
}